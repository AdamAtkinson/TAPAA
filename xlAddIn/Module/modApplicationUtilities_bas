Attribute VB_Name = "modApplicationUtilities"
Option Explicit
'========================================================================
'========================================================================
'used with get PID
'Private Declare Function apiGetClassName Lib "user32" Alias _
'                "GetClassNameA" (ByVal hWnd As Long, _
'                ByVal lpClassName As String, _
'                ByVal nMaxCount As Long) As Long
'Private Declare Function apiGetDesktopWindow Lib "user32" Alias _
'                "GetDesktopWindow" () As Long
'Private Declare Function apiGetWindow Lib "user32" Alias _
'                "GetWindow" (ByVal hWnd As Long, _
'                ByVal wCmd As Long) As Long
'Private Declare Function apiGetWindowLong Lib "user32" Alias _
'                "GetWindowLongA" (ByVal hWnd As Long, ByVal _
'                nIndex As Long) As Long
'Private Declare Function apiGetWindowText Lib "user32" Alias _
'                "GetWindowTextA" (ByVal hWnd As Long, ByVal _
'                lpString As String, ByVal aint As Long) As Long
'Private Declare Function GetWindowThreadProcessId Lib "user32" _
'                (ByVal hWnd As Long, lpdwProcessId As Long) As Long
Private Const mcGWCHILD = 5
Private Const mcGWHWNDNEXT = 2
Private Const mcGWLSTYLE = (-16)
Private Const mcWSVISIBLE = &H10000000
Private Const mconMAXLEN = 255
'========================================================================
'========================================================================
'used with GetAllWorkbookWindowNames
'Declare Function FindWindowEx Lib "user32" Alias "FindWindowExA" (ByVal hWnd1 As Long, ByVal hWnd2 As Long, ByVal lpsz1 As String, ByVal lpsz2 As String) As Long
'Declare Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal hWnd As Long, ByVal lpClassName As String, ByVal nMaxCount As Long) As Long
'Declare Function IIDFromString Lib "ole32" (ByVal lpsz As Long, ByRef lpiid As UUID) As Long
'Declare Function AccessibleObjectFromWindow Lib "oleacc" (ByVal hWnd As Long, ByVal dwId As Long, ByRef riid As UUID, ByRef ppvObject As Object) As Long
Type UUID 'GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(7) As Byte
End Type
Const IID_IDispatch As String = "{00020400-0000-0000-C000-000000000046}"
Const OBJID_NATIVEOM As Long = &HFFFFFFF0
'========================================================================
'========================================================================
Sub GetAllWorkbookWindowNames() 'A2 uncommented in
'Sub Command1_Click() 'A2 commented out
    On Error GoTo MyErrorHandler
    Dim hWndMain As Long
    hWndMain = FindWindowEx(0&, 0&, "XLMAIN", vbNullString)
    Do While hWndMain <> 0
        GetWbkWindows hWndMain
        hWndMain = FindWindowEx(0&, hWndMain, "XLMAIN", vbNullString)
    Loop
    Exit Sub
MyErrorHandler:
    MsgBox "GetAllWorkbookWindowNames" & vbCrLf & vbCrLf & "Err = " & Err.Number & vbCrLf & "Description: " & Err.Description
End Sub
'========================================================================
'========================================================================

Function IsUserFormLoaded(ByVal UFName As String) As Boolean
  Dim UForm As Object

  IsUserFormLoaded = False
  For Each UForm In VBA.UserForms
    If UForm.Name = UFName Then
      IsUserFormLoaded = True
      Exit For
    End If
  Next
End Function 'IsUserFormLoaded


Private Sub GetWbkWindows(ByVal hWndMain As Long)
    On Error GoTo MyErrorHandler
    Dim hWndDesk As Long
    hWndDesk = FindWindowEx(hWndMain, 0&, "XLDESK", vbNullString)
    If hWndDesk <> 0 Then
        Dim hWnd As Long
        hWnd = FindWindowEx(hWndDesk, 0, vbNullString, vbNullString)
        Dim strText As String
        Dim lngRet As Long
        Do While hWnd <> 0
            strText = String$(100, Chr$(0))
            lngRet = GetClassName(hWnd, strText, 100)
            If left$(strText, lngRet) = "EXCEL7" Then
                GetExcelObjectFromHwnd hWnd
                Exit Sub
            End If
            hWnd = FindWindowEx(hWndDesk, hWnd, vbNullString, vbNullString)
            Loop
        On Error Resume Next
    End If
    Exit Sub
MyErrorHandler:
    MsgBox "GetWbkWindows" & vbCrLf & vbCrLf & "Err = " & Err.Number & vbCrLf & "Description: " & Err.Description
End Sub
'========================================================================
'========================================================================
Public Function GetExcelObjectFromHwnd(ByVal hWnd As Long) As Boolean
    On Error GoTo MyErrorHandler
    Dim fOk As Boolean
    fOk = False
    Dim iid As UUID
    Call IIDFromString(StrPtr(IID_IDispatch), iid)
    Dim obj As Object
    If AccessibleObjectFromWindow(hWnd, OBJID_NATIVEOM, iid, obj) = 0 Then 'S_OK
        Dim objApp As Excel.Application
        Set objApp = obj.Application
        Debug.Print objApp.Workbooks(1).Name
        Dim myWorksheet As Worksheet
        For Each myWorksheet In objApp.Workbooks(1).Worksheets
            Debug.Print "     " & myWorksheet.Name
            DoEvents
        Next
        fOk = True
    End If
    GetExcelObjectFromHwnd = fOk
    Exit Function
MyErrorHandler:
    MsgBox "GetExcelObjectFromHwnd" & vbCrLf & vbCrLf & "Err = " & Err.Number & vbCrLf & "Description: " & Err.Description
End Function
'========================================================================
'========================================================================
'this one may be a straggler
Sub fEnumWindows()
Dim lngx As Long, lngLen As Long
Dim lngStyle As Long, strCaption As String
Dim lThreadID As Long
Dim lProcessId As Long
Dim bVisOnly As Boolean
Select Case MsgBox("Do you ONLY want to see visible processes?", vbYesNo)
    Case VbMsgBoxResult.vbYes
        bVisOnly = True
    Case VbMsgBoxResult.vbNo
        bVisOnly = False
End Select
lngx = apiGetDesktopWindow()
'Return the first child to Desktop
lngx = apiGetWindow(lngx, mcGWCHILD)
Do While Not lngx = 0
    strCaption = fGetCaption(lngx)
    If Len(strCaption) > 0 Then
        lngStyle = apiGetWindowLong(lngx, mcGWLSTYLE)
        lThreadID = GetWindowThreadProcessId(lngx, lProcessId)
            Select Case bVisOnly
                Case Is = True
                'enum visible windows only
                    If lngStyle And mcWSVISIBLE Then
                        Debug.Print "Class = " & fGetClassName(lngx),
                        Debug.Print "Caption = " & fGetCaption(lngx),
                        Debug.Print "Process ID = " & lProcessId,
                        Debug.Print "Thread ID = " & lThreadID
                    End If
                Case Is = False
                'enum all processes
                        Debug.Print "Class = " & fGetClassName(lngx),
                        Debug.Print "Caption = " & fGetCaption(lngx),
                        Debug.Print "Process ID = " & lProcessId,
                        Debug.Print "Thread ID = " & lThreadID
            End Select
    End If
    lngx = apiGetWindow(lngx, mcGWHWNDNEXT)
Loop
End Sub
'========================================================================
'========================================================================
Private Function fGetClassName(hWnd As Long) As String
    Dim strBuffer As String
    Dim intCount As Integer
   
    strBuffer = String$(mconMAXLEN - 1, 0)
    intCount = apiGetClassName(hWnd, strBuffer, mconMAXLEN)
    If intCount > 0 Then
        fGetClassName = left$(strBuffer, intCount)
    End If
End Function
'========================================================================
'========================================================================
Private Function fGetCaption(hWnd As Long) As String
    Dim strBuffer As String
    Dim intCount As Integer
    strBuffer = String$(mconMAXLEN - 1, 0)
    intCount = apiGetWindowText(hWnd, strBuffer, mconMAXLEN)
    If intCount > 0 Then
        fGetCaption = left$(strBuffer, intCount)
    End If
End Function
'========================================================================
'========================================================================
'========================================================================
Sub CreatePIDTable()
    Dim strBuffer As String * mconMAXLEN 'fixed length string required for api call
    Dim lnghWnd As Long
    Dim lngLen As Long
    Dim lngThread As Long
    Dim lngProcess As Long
    Dim lngStyle As Long
    Dim blnVisOnly As Boolean 'used for print.debug only - limits results to visible windows with titles if true
    Dim blnOutFile As Boolean 'creates excel output if true, print.debug if false
    Dim strFName As String
    Dim strPath As String
    Dim strTitle As String
    Dim strClass As String
    Dim intRow As Integer
    strPath = "C:\Users\aatkinson\Documents\Application Development\Process ID Logs"
    strFName = Format(Now, "yyyy.MM.dd-HHmmss") & " PID Table.xlsx"
    Select Case MsgBox("Do you want to create an output file?", vbYesNo)
        Case VbMsgBoxResult.vbYes 'create and format excel output
            blnOutFile = True
            'turn off screen updating to speed report generation
            Application.ScreenUpdating = False
            Workbooks.Add
            ActiveSheet.Name = "PID Table"
            Cells(1, 1) = "Class"
            Cells(1, 2) = "Title"
            Cells(1, 3) = "Process"
            Cells(1, 4) = "Thread"
            Cells(1, 5) = "Visible"
            Columns("A:A").ColumnWidth = 75
            Columns("B:B").ColumnWidth = 100
            With Columns("C:E")
                .ColumnWidth = 12
                .HorizontalAlignment = xlCenter
            End With
            With Rows("1:1")
                With .Font
                    .Bold = True
                    .Name = "Calibri"
                    .Size = 14
                End With
                .HorizontalAlignment = xlCenter
                .AutoFilter
            End With
            With ActiveWindow
                .SplitColumn = 0
                .SplitRow = 1
                .FreezePanes = True
            End With
        Case VbMsgBoxResult.vbNo 'output goes to print.debug - option to exclude invisible windows for smaller report
            blnOutFile = False
            Select Case MsgBox("Do you want to to skip invisible and untitled windows?", vbYesNo)
                Case VbMsgBoxResult.vbYes 'do not send invisible and untitled windows to debug.print
                    blnVisOnly = True
                Case VbMsgBoxResult.vbNo 'send everything to debug.print
                    blnVisOnly = False
            End Select
    End Select
    'set row index
    intRow = 1
    'get desktop window
    lnghWnd = apiGetDesktopWindow()
    'get first child window
    lnghWnd = apiGetWindow(lnghWnd, mcGWCHILD)
    Do While Not lnghWnd = 0 'loop through all "next" windows
        'get window title (API requires strBuffer to be fixed length - trim null characters after fetching)
        lngLen = apiGetWindowText(lnghWnd, strBuffer, mconMAXLEN)
        strTitle = left(strBuffer, lngLen)
        'get window class (API requires strBuffer to be fixed length - trim null characters after fetching)
        lngLen = apiGetClassName(lnghWnd, strBuffer, mconMAXLEN)
        strClass = left(strBuffer, lngLen)
        'get window style (needed for visible attribute)
        lngStyle = apiGetWindowLong(lnghWnd, mcGWLSTYLE)
        'get process id and process thread
        lngThread = GetWindowThreadProcessId(lnghWnd, lngProcess)
        Select Case blnOutFile
            Case True 'excel output selected, advances 1 row and writes data
                intRow = intRow + 1
                Cells(intRow, 1) = strClass
                Cells(intRow, 2) = strTitle
                Cells(intRow, 3) = lngProcess
                Cells(intRow, 4) = lngThread
                Cells(intRow, 5) = (lngStyle And mcWSVISIBLE) = mcWSVISIBLE
            Case False 'debug.print output selected
                'do not print invisible or untitled windows if flag is set
                'print everything if flag is not set
                If (blnVisOnly = True _
                And (lngStyle And mcWSVISIBLE) _
                And Len(strTitle) > 0) _
                Or blnVisOnly = False Then
                    Debug.Print "Class = " & strClass,
                    Debug.Print "Title = " & strTitle,
                    Debug.Print "Process ID = " & lngProcess,
                    Debug.Print "Thread ID = " & lngThread
                End If
        End Select
        'advances to next window
        lnghWnd = apiGetWindow(lnghWnd, mcGWHWNDNEXT)
    Loop
    Select Case blnOutFile
        Case True 'excel output selected
            Application.ScreenUpdating = True
    '        ActiveWorkbook.SaveAs Filename:=strPath & "\" & strFName
        Case False 'debug.print output selected
            Application.VBE.MainWindow.Visible = True
    End Select
End Sub
'========================================================================
'========================================================================
'get path of file
Function GetFolder(strPath As String) As String
Dim fldr As FileDialog
Dim sItem As String
Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
With fldr
    .Title = "Select a Folder"
    .AllowMultiSelect = False
    .InitialFileName = strPath
    If .Show <> -1 Then GoTo NextCode
    sItem = .SelectedItems(1)
End With
NextCode:
GetFolder = sItem
Set fldr = Nothing
End Function
'========================================================================
'========================================================================
Sub test1()
    ActiveSheet.OLEObjects.Add(ClassType:="AcroExch.Document.11", Link:=False, _
        DisplayAsIcon:=False).Activate
    ActiveWindow.SmallScroll Down:=33
    Selection.Verb Verb:=xlPrimary
    ActiveWindow.SmallScroll Down:=-9
End Sub


