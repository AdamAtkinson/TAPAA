Attribute VB_Name = "DEPmyRenameAndForward"
''                                                                                           '
''uses custom global function 'ReadFile' to read signatures & relies on external files       '
''and public constant DBLLN                                                               '
'
'Option Explicit
'
'Private Const copierSubject As String = "FW: Scanned from a Xerox multifunction device"
'Private Const copierEmailAddress As String = "ALICA22@thementornetwork.com"
'Private Const oldSignaturePath As String = "C:\Users\e-aatkinson\AppData\Local\VBA\Outlook\"
'Private Const newSignaturePath As String = "\Microsoft\Signatures\"
'Private Const newSignatureFileName As String = "Basic Reply.htm"
'Private Const oldSignatureFileName As String = "ReplaceSignature.htm"
'
'Sub RenameAttachmentsWhenForwarding()
'    Dim AttachedFile As Outlook.Attachment
'    Dim sourceMailItem As Outlook.MailItem
'    Dim allAttachments As Outlook.Attachments
'    Dim AttachmentCount As Long
'    Dim attachmentDisplayName As String
'    Dim attachmentFileExtension As String
'    Dim fullAttachmentFilename As String
'    Dim i As Long
'    Dim newAttachmentFilename As String
'    Dim renameFileDialogTitle As String
'    Dim temporarySavePath As String
'    Dim thisInspector As Outlook.Inspector
'    Dim signaturePath As String
'    Dim newSignature As String
'    Dim oldSignature As String
'    Dim messageBody As String
'    Dim destinationMailItem As Outlook.MailItem
'
'    If GetTheDesiredMailItemInEditMode(destinationMailItem, False, "Move attachments to this email?", "Active Email Composition Detected") Then
'
'        If Application.ActiveExplorer.Selection.Count > 0 Then
'            If TypeOf Application.ActiveExplorer.Selection.Item(1) Is Outlook.MailItem Then
'                Set sourceMailItem = Application.ActiveExplorer.Selection.Item(1)
'                Set allAttachments = sourceMailItem.Attachments
'                AttachmentCount = allAttachments.Count
'            End If
'        End If
'
'        If AttachmentCount = 0 Then
'            MsgBox "How can you rename and forward an attachment without an attachment?", vbCritical, "Unable to Continue"
'            Exit Sub
'        End If
'
'        If destinationMailItem Is Nothing Then
'            Set destinationMailItem = sourceMailItem.Forward
'            For Each AttachedFile In destinationMailItem.Attachments
'                AttachedFile.Delete
'            Next
'        End If
'
'
'        'if the source email is from the copier then convert to html and use an html signature
'        If sourceMailItem.SenderEmailAddress = copierEmailAddress Then
'            If sourceMailItem.BodyFormat = olFormatPlain Then
'                signaturePath = Environ("APPDATA") & newSignaturePath & newSignatureFileName
'                If CBool(Len(Dir(signaturePath))) Then newSignature = ReadFile(signaturePath)
'                signaturePath = oldSignaturePath & oldSignatureFileName
'                If CBool(Len(Dir(signaturePath))) Then oldSignature = ReadFile(signaturePath)
'                If CBool(Len(newSignature)) And CBool(Len(oldSignature)) Then
'                    messageBody = destinationMailItem.HTMLBody
'                    messageBody = Replace(messageBody, oldSignature, vbNullString)
'                    messageBody = "<br><br><br><br>" & newSignature & messageBody
'                    destinationMailItem.HTMLBody = messageBody
'                End If
'            End If
'        End If
'
'        destinationMailItem.Display
'        temporarySavePath = Environ("LOCALAPPDATA") & "\Temp\"
'        If Not CBool(Len(Dir(temporarySavePath, vbDirectory))) Then MkDir temporarySavePath
'
'        For Each AttachedFile In allAttachments
'            attachmentFileExtension = Right(AttachedFile.FileName, Len(AttachedFile.FileName) - InStrRev(AttachedFile.FileName, ".") + 1)
'            attachmentDisplayName = Replace(AttachedFile.FileName, attachmentFileExtension, vbNullString)
'            renameFileDialogTitle = "Rename Attachment " & AttachedFile.Index & " of " & AttachmentCount
'            newAttachmentFilename = InputBox("Click 'Cancel' to keep original name." & DBLLN & "New name for:" & vbNewLine & attachmentDisplayName, renameFileDialogTitle)
'
'            If CBool(Len(newAttachmentFilename)) Then
'                fullAttachmentFilename = temporarySavePath & newAttachmentFilename & attachmentFileExtension
'            Else
'                fullAttachmentFilename = temporarySavePath & AttachedFile.FileName
'            End If
'
'            AttachedFile.SaveAsFile fullAttachmentFilename
'            destinationMailItem.Attachments.Add fullAttachmentFilename
'            Kill fullAttachmentFilename
'        Next
'
'        If destinationMailItem.Subject = copierSubject Then destinationMailItem.Subject = "Regarding Attachment: " & _
'                        Left(destinationMailItem.Attachments.Item(1).DisplayName, InStrRev(destinationMailItem.Attachments.Item(1).DisplayName, ".") - 1)
'
'    End If
'End Sub
'
'Sub InsertHTML()
'    Dim targetEmail As Outlook.MailItem
'    If GetTheDesiredMailItemInEditMode(targetEmail, "View HTML of this email?", "Cycling emails") Then
'        Dim plainTextEmail As Outlook.MailItem
'        Set plainTextEmail = Outlook.CreateItem(olMailItem)
'        plainTextEmail.Display
'        plainTextEmail.Body = targetEmail.HTMLBody
'    End If
'End Sub
'
'Sub InsertW9Request()
'
'    Dim w9Tag As String
'    w9Tag = "[w9]"
'
'    Dim replaceSTring As String
'    replaceSTring = "Please forward a completed W9 so we may create and assign a vendor record and remit payment of invoices." & "<br><br>" & _
'                    "Please also:" & "<br>" & _
'                    "&nbsp &nbsp &nbsp -&nbsp &nbsp &nbsp Ensure the bill-to address is correctly identified as <b>163 Technology Drive, Suite 200, Irvine, CA 92618 </b> <br>" & _
'                    "&nbsp &nbsp &nbsp -&nbsp &nbsp &nbsp Ensure the ship-to/service address is identified on the invoice and that it is different from the bill-to address" & "<br>" & _
'                    "&nbsp &nbsp &nbsp -&nbsp &nbsp &nbsp We accept electronic invoices via email to <a href=" & Chr(34) & "mailto:accountspayable@neurorestorative.com" & Chr(34) & ">accountspayable@neurorestorative.com</a>" & "<br>" & _
'                    "&nbsp &nbsp &nbsp  &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp We prefer to recieve invoices as an attached PDF, DOCX, XLSX but also accept attachments in other formats or embedded in the body of the email <br>" & _
'                    "&nbsp &nbsp &nbsp  &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp Please <b>DO NOT</b> send links to download your invoice from a website, your invoice must be submitted <br>" & _
'                    "&nbsp &nbsp &nbsp  &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp &nbsp We are a health care provider and restrict internet access as a security measure to protect patient privacy <br><br><o:p></o:p></p>"
'
'    Dim emailRequest As Outlook.MailItem
'    If GetTheDesiredMailItemInEditMode(emailRequest, "Search this email for [W9] tag?", "Cycling emails") Then
'        With emailRequest
'            .HTMLBody = Replace(.HTMLBody, w9Tag, replaceSTring)
'        End With
'    End If
'End Sub
'
'Function GetTheDesiredMailItemInEditMode(ByRef returnMailItem As Outlook.MailItem, _
'                       Optional ByVal failIfNotFound As Boolean, _
'                       Optional ByVal promptText As String, _
'                       Optional ByVal promptTitle As String) _
'                       As Boolean
'
'    If Not CBool(Len(promptText)) Then promptText = "Work with this email?"
'    If Not CBool(Len(promptTitle)) Then promptTitle = "Cycling Through Open Email Edit Windows"
'
'    Dim mailItemArray() As Outlook.MailItem
'    ReDim mailItemArray(0 To 0)
'
'    Dim thisInspector As Outlook.Inspector
'    For Each thisInspector In Application.Inspectors
'        If TypeOf thisInspector.CurrentItem Is Outlook.MailItem Then
'            With thisInspector
'                If Not .CurrentItem.Sent Then
'                    ReDim Preserve mailItemArray(0 To UBound(mailItemArray) + 1)
'                    Set mailItemArray(UBound(mailItemArray)) = thisInspector.CurrentItem
'                End If
'            End With
'        End If
'    Next thisInspector
'
'    Dim useNewEmail As Boolean
'    Dim functionFailed As Boolean
'    Dim returnSuccess As Boolean
'    If UBound(mailItemArray) > 0 Then
'        If UBound(mailItemArray) > 1 Then
'            Select Case MsgBox("You are composing " & UBound(mailItemArray) & " emails.  Do you want to work with any of them?", vbYesNoCancel, "Multiple Email Compositions Detected")
'                Case vbYes
'                    'do nothing
'                Case vbNo
'                    useNewEmail = True
'                Case vbCancel
'                    functionFailed = True
'            End Select
'        End If
'
'        If Not functionFailed And Not useNewEmail Then
'            Dim i As Long
'            For i = 1 To UBound(mailItemArray)
'                mailItemArray(i).Display
'                Select Case MsgBox(mailItemArray(i).Subject & DBLLN & promptText, vbYesNoCancel, promptTitle)
'                    Case vbYes
'                        Set mailItemArray(0) = mailItemArray(i)
'                        useNewEmail = False
'                        Exit For
'                    Case vbNo
'                        useNewEmail = True
'                    Case vbCancel
'                        functionFailed = True
'                        Exit For
'                End Select
'            Next i
'
'            If Not functionFailed And Not useNewEmail Then
'                If mailItemArray(0) Is Nothing Then
'                    Select Case MsgBox("Cycled through all open compositions, create a new email?", vbYesNo, "No Emails Chosen")
'                        Case vbYes
'                            useNewEmail = True
'                        Case vbNo
'                            functionFailed = True
'                    End Select
'                End If
'            End If
'
'        End If
'    Else
'        If failIfNotFound Then
'            MsgBox "Could not find an email being edited."
'        Else
'            returnSuccess = True
'        End If
'    End If
'
'
'    If functionFailed Then
'        Set returnMailItem = Nothing
'        returnSuccess = False
'    Else
'        If useNewEmail Then
'            Set returnMailItem = Nothing
'            returnSuccess = True
'        Else
'            If Not mailItemArray(0) Is Nothing Then
'                Set returnMailItem = mailItemArray(0)
'                returnSuccess = True
'            End If
'        End If
'    End If
'
'    GetTheDesiredMailItemInEditMode = returnSuccess
'
'End Function
'
'Public Sub ResetView()
'
'Dim a As Outlook.Application
'Set a = Outlook.Application
'
'Dim e As Outlook.Explorer
'Set e = a.ActiveExplorer
'
'Dim v As Outlook.View
'Set v = e.CurrentView
'
'Dim s As Outlook.Selection
'Set s = e.Selection
'
'Dim m As Outlook.MailItem
'Set m = s.Item(1)
'
'Dim f As Outlook.Folder
'Set f = m.Parent
'
'
'End Sub
'
'Sub ShowCategoryDialogSelectedItems()
''quickly shows the categories dialog for all selected items
'    On Error GoTo HANDLER
'    Dim oSelection As Outlook.Selection
'    Set oSelection = Application.ActiveExplorer.Selection
'    If Not oSelection Is Nothing Then
'        If oSelection.Count > 0 Then
'            On Error Resume Next
'            Dim oItem As Object
'            For Each oItem In oSelection
'                oItem.ShowCategoriesDialog
'            Next oItem
'        End If
'    End If
'HANDLER:
'End Sub
'
'
'Public Sub AssignCategoryForSelectedItems(Optional ByVal categoryString As String)
'    On Error GoTo HANDLER
'    Dim oSelection As Outlook.Selection
'    Set oSelection = Application.ActiveExplorer.Selection
'    If Not oSelection Is Nothing Then
'        If oSelection.Count > 0 Then
'            On Error Resume Next
'            Dim oItem As Object
'            For Each oItem In oSelection
'                If CBool(Len(categoryString)) And CBool(InStr(gfGetStringCategoryNames, categoryString)) Then
'                    If Not CBool(InStr(oItem.Categories, categoryString)) Then
'                        If CBool(Len(oItem.Categories)) Then
'                            oItem.Categories = oItem.Categories & ", " & categoryString
'                        Else
'                            oItem.Categories = oItem.Categories & categoryString
'                        End If
'                    Else
'                        Dim tempString As String
'                        tempString = Replace(oItem.Categories, categoryString, vbNullString)
'                        tempString = Replace(tempString, ",,", vbNullString)
'                        If Left(tempString, 1) = "," Then tempString = Right(tempString, Len(tempString) - 1)
'                        If Right(tempString, 1) = "," Then tempString = Left(tempString, Len(tempString) - 1)
'                        oItem.Categories = tempString
'                    End If
'                Else
'                    oItem.ShowCategoriesDialog
'                End If
'                oItem.Save
'            Next oItem
'        End If
'    End If
'HANDLER:
'End Sub
'
Private Sub DisplayTableViewFields()
    Dim objTableView As TableView
    Dim objViewField As ViewField
    Dim strOutput As String
    If Application.ActiveExplorer.CurrentView.ViewType = olTableView Then
        ' Obtain a TableView object reference for the current table view.
        Set objTableView = _
        Application.ActiveExplorer.CurrentView
        ' Iterate through the ViewFields collection for the table view,
        ' obtaining the label and the XML schema name for each field included in the view.
        For Each objViewField In objTableView.ViewFields
            With objViewField
                strOutput = strOutput & .ColumnFormat.Label & " (" & .ViewXMLSchemaName & ")" & vbCrLf
            End With
        Next
        ' Display a dialog box containing the concatenated view field information.
        dbP strOutput
    End If
End Sub

